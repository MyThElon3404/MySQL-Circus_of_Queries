-- QUESTION : 1
-- 1. You have three tables: Shapes, Colors, and ShapeColors. The Shapes table contains information about different shapes, 
-- the Colors table stores information about various colors, and the ShapeColors table links shapes with their corresponding colors.

-- Write an SQL query to find the shapes that have exactly two different colors, and for those shapes, list their ShapeName, 
-- the two ColorNames, and the total combined ColorPercentage.

CREATE TABLE Shapes (
    ShapeID INT PRIMARY KEY,
    ShapeName VARCHAR(50) NOT NULL
);

CREATE TABLE Colors (
    ColorID INT PRIMARY KEY,
    ColorName VARCHAR(50) NOT NULL
);

CREATE TABLE ShapeColors (
    ShapeID INT,
    ColorID INT,
    ColorPercentage DECIMAL(5,2),
    PRIMARY KEY (ShapeID, ColorID),
    FOREIGN KEY (ShapeID) REFERENCES Shapes(ShapeID),
    FOREIGN KEY (ColorID) REFERENCES Colors(ColorID)
);
INSERT INTO Shapes (ShapeID, ShapeName) VALUES 
(1, 'Circle'),
(2, 'Triangle'),
(3, 'Square'),
(4, 'Rectangle');

INSERT INTO Colors (ColorID, ColorName) VALUES 
(1, 'Red'),
(2, 'Blue'),
(3, 'Green'),
(4, 'Yellow');

INSERT INTO ShapeColors (ShapeID, ColorID, ColorPercentage) VALUES 
(1, 1, 50.00),  -- Circle (Red)
(1, 2, 50.00),  -- Circle (Blue)
(2, 3, 70.00),  -- Triangle (Green)
(2, 4, 30.00),  -- Triangle (Yellow)
(3, 1, 40.00),  -- Square (Red)
(3, 2, 30.00),  -- Square (Blue)
(3, 3, 30.00),  -- Square (Green)
(4, 2, 60.00),  -- Rectangle (Blue)
(4, 3, 40.00);  -- Rectangle (Green)

-- SOLUTION :------------------------------------------------------------------------------------------------------------------------

WITH ShapeColorDetails AS (
    SELECT 
        s.ShapeName, 
        c.ColorName,
        sc.ColorPercentage
    FROM ShapeColors AS sc
    JOIN Shapes AS s ON sc.ShapeID = s.ShapeID
    JOIN Colors AS c ON sc.ColorID = c.ColorID
)
SELECT 
    ShapeName,
    STRING_AGG(ColorName, ', ') AS ColorNames,
    SUM(ColorPercentage) AS TotalColorPercentage
FROM ShapeColorDetails
GROUP BY ShapeName
HAVING COUNT(DISTINCT ColorName) = 2;

--------------------------------------- OR ----------------------------------------------------

WITH ShapeColorDetails AS (
    SELECT 
        s.ShapeName,
        c.ColorName,
        sc.ColorPercentage
    FROM ShapeColors sc
    JOIN Shapes s ON sc.ShapeID = s.ShapeID
    JOIN Colors c ON sc.ColorID = c.ColorID
),
FilteredShapes AS (
    SELECT 
        ShapeName,
        COUNT(DISTINCT ColorName) AS ColorCount,
        MAX(ColorName) AS Color1,
        MIN(ColorName) AS Color2,
        SUM(ColorPercentage) AS TotalColorPercentage
    FROM ShapeColorDetails
    GROUP BY ShapeName
    HAVING COUNT(DISTINCT ColorName) = 2
)
SELECT ShapeName, Color1, Color2, TotalColorPercentage
FROM FilteredShapes;

-- ==================================================================================================================================

-- QUESTION : 2
-- 2. You are given two tables, Sales and Products. The Sales table records individual sales transactions, 
-- while the Products table contains information about a range of products.

-- Your objective is to write an SQL query to calculate the total revenue generated by each product within all categories. 
-- The output should be correct up to 2 decimal places. Sort the final output alphabetically by category and the by total_revenue 
-- in descending order.

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(255)
);
INSERT INTO Products (product_id, product_name, category)  
VALUES  
    (1, 'Product A', 'Electronics'),  
    (2, 'Product B', 'Clothing'),  
    (3, 'Product C', 'Electronics'),  
    (4, 'Product D', 'Clothing');

CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    quantity_sold INT,
    price_per_unit DECIMAL(10,2),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);
INSERT INTO Sales (sale_id, product_id, quantity_sold, price_per_unit)  
VALUES  
    (101, 1, 5, 60.00),   -- Product A: 5 * 60 = 300  
    (102, 2, 3, 95.00),   -- Product B: 3 * 95 = 285  
    (103, 3, 5, 45.00),   -- Product C: 5 * 45 = 225  
    (104, 4, 5, 50.00);   -- Product D: 5 * 50 = 250  

-- SOLUTION :------------------------------------------------------------------------------------------------------------------------

SELECT  
    p.category,  
    p.product_name,  
    ROUND(SUM(s.quantity_sold * s.price_per_unit), 2) AS total_revenue  
FROM Sales s  
JOIN Products p ON s.product_id = p.product_id  
GROUP BY p.category, p.product_name  
ORDER BY p.category ASC, total_revenue DESC;

-- ==================================================================================================================================
